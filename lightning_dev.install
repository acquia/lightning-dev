<?php

/**
 * @file
 * Contains installation and update routines for Lightning Dev.
 */

use Drupal\image\Entity\ImageStyle;
use Drupal\lightning_core\ConfigHelper as Config;

/**
 * Implements hook_install().
 */
function lightning_dev_install() {
  $config_factory = \Drupal::configFactory();

  $config_factory->getEditable('system.performance')
    ->set('css.preprocess', FALSE)
    ->set('js.preprocess', FALSE)
    ->save();

  $config_factory->getEditable('system.logging')
    ->set('error_level', ERROR_REPORTING_DISPLAY_ALL)
    ->save();

  // Sentence-case the label of the media browser's embed code widget. Yes, not
  // doing this can cause tests to fail.
  $config_factory->getEditable('entity_browser.browser.media_browser')
    ->set('widgets.8b142f33-59d1-47b1-9e3a-4ae85d8376fa.label', 'Create embed')
    ->save();

  $config_factory->getEditable('lightning_api.settings')
    ->set('entity_json', TRUE)
    ->set('bundle_docs', TRUE)
    ->save();

  // Expose the moderation_history view in the UI.
  lightning_dev_update_8009();

  if (\Drupal::moduleHandler()->moduleExists('crop')) {
    $image_styles = array_map(
      function ($crop_type) {
        return 'crop_' . $crop_type;
      },
      \Drupal::entityQuery('crop_type')->execute()
    );
    $image_styles = ImageStyle::loadMultiple($image_styles);

    /** @var ImageStyle $image_style */
    foreach ($image_styles as $image_style) {
      $effects = $image_style->getEffects();
      $configuration = $effects->getConfiguration();
      $effect = array_shift($configuration);
      $effect['uuid'] = 'crop';
      $effects->setConfiguration(['crop' => $effect]);
      $image_style->save();
    }
  }
}

/**
 * Executes manual updates for Lightning 2.0.1 --> 2.0.2.
 */
function lightning_dev_update_8001() {
  \Drupal::service('module_installer')
    ->install(['diff', 'lightning_contact_form']);
}

/**
 * Executes manual updates for Lightning 2.0.2 --> 2.0.3.
 */
function lightning_dev_update_8002() {
  $config = Config::forModule('lightning_landing_page');

  $config->getEntity('field_config', 'node.landing_page.body')->save();
  $config->getEntity('entity_view_display', 'node.landing_page.teaser')->save();

  $values = $config->read('core.entity_form_display.node.landing_page.default');
  entity_get_form_display('node', 'landing_page', 'default')
    ->setComponent('body', $values['content']['body'])
    ->save();

  $values = $config->read('core.entity_view_display.node.landing_page.default');
  entity_get_display('node', 'landing_page', 'default')
    ->setComponent('body', $values['content']['body'])
    ->unsetThirdPartySetting('panelizer', 'enable')
    ->unsetThirdPartySetting('panelizer', 'custom')
    ->unsetThirdPartySetting('panelizer', 'allow')
    ->unsetThirdPartySetting('panelizer', 'default')
    ->unsetThirdPartySetting('panelizer', 'displays')
    ->save();

  \Drupal::service('module_installer')->install(['lightning_search']);
}

/**
 * Executes manual updates for Lightning 2.0.3 --> 2.0.4.
 */
function lightning_dev_update_8003() {
  // Allow the image browser to size itself responsively.
  \Drupal::configFactory()
    ->getEditable('entity_browser.browser.image_browser')
    ->set('display_configuration.width', NULL)
    ->set('display_configuration.height', NULL)
    ->save();
}

/**
 * Removed in Lightning 8.x-2.13.
 *
 * Formerly set up centralized Behat configuration.
 *
 * @deprecated
 */
function lightning_dev_update_8004() {
}

/**
 * Executes manual updates for Lightning 2.1.0 --> 2.1.1.
 */
function lightning_dev_update_8005() {
  // Add the 'bundle' contextual filter to the media browser.
  \Drupal::configFactory()
    ->getEditable('views.view.media')
    ->set('display.entity_browser_1.display_options.arguments.bundle', unserialize('a:27:{s:2:"id";s:6:"bundle";s:5:"table";s:16:"media_field_data";s:5:"field";s:6:"bundle";s:12:"relationship";s:4:"none";s:10:"group_type";s:5:"group";s:11:"admin_label";s:0:"";s:14:"default_action";s:7:"default";s:9:"exception";a:3:{s:5:"value";s:3:"all";s:12:"title_enable";b:0;s:5:"title";s:3:"All";}s:12:"title_enable";b:0;s:5:"title";s:0:"";s:21:"default_argument_type";s:29:"entity_browser_widget_context";s:24:"default_argument_options";a:3:{s:11:"context_key";s:14:"target_bundles";s:8:"fallback";s:3:"all";s:8:"multiple";s:2:"or";}s:25:"default_argument_skip_url";b:0;s:15:"summary_options";a:4:{s:9:"base_path";s:0:"";s:5:"count";b:1;s:14:"items_per_page";i:25;s:8:"override";b:0;}s:7:"summary";a:3:{s:10:"sort_order";s:3:"asc";s:17:"number_of_records";i:0;s:6:"format";s:15:"default_summary";}s:18:"specify_validation";b:1;s:8:"validate";a:2:{s:4:"type";s:19:"entity:media_bundle";s:4:"fail";s:6:"ignore";}s:16:"validate_options";a:4:{s:9:"operation";s:4:"view";s:8:"multiple";i:1;s:6:"access";b:0;s:7:"bundles";N;}s:8:"glossary";b:0;s:5:"limit";i:0;s:4:"case";s:4:"none";s:9:"path_case";s:4:"none";s:14:"transform_dash";b:0;s:12:"break_phrase";b:1;s:11:"entity_type";s:5:"media";s:12:"entity_field";s:6:"bundle";s:9:"plugin_id";s:6:"string";}'))
    ->set('display.entity_browser_1.display_options.defaults.arguments', FALSE)
    ->set('display.entity_browser_1.display_options.filters.bundle.expose.argument', 'bundle')
    ->save();
}

/**
 * Executes manual updates for Lightning 2.1.5 --> 2.1.6.
 */
function lightning_dev_update_8006() {
  $config_factory = \Drupal::configFactory();
  \Drupal::service('plugin.manager.embed.type')->clearCachedDefinitions();

  $button = $config_factory->getEditable('embed.button.media_browser');
  $settings = $button->get('type_settings');
  $settings['display_plugins'][] = 'media_image';
  $button->set('type_settings', $settings)->save();

  $format = $config_factory->getEditable('filter.format.rich_text');
  $settings = $format->get('filters.filter_html.settings');
  $settings['allowed_html'] = str_replace('<drupal-entity data-*>', '<drupal-entity data-* title alt>', $settings['allowed_html']);
  $format->set('filters.filter_html.settings', $settings)->save();
}

/**
 * Executes manual updates for Lightning 2.1.6 --> 2.1.7.
 */
function lightning_dev_update_8007() {
  \Drupal::service('lightning.content_roles')
    ->grantPermissions('creator', [
      'access in-place editing',
      'access contextual links',
      'access toolbar',
    ]);

  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $installer */
  $installer = \Drupal::service('module_installer');
  $installer->uninstall(['page_manager']);
  $installer->install(['lightning_api']);

  \Drupal::configFactory()
    ->getEditable('lightning_api.settings')
    ->set('entity_json', TRUE)
    ->save();
}

/**
 * Deletes stored key paths from Simple OAuth settings.
 */
function lightning_dev_update_8008() {
  // This is not a manual update step, but it's required for the Travis CI tests
  // to pass when testing the update path from 2.1.7.
  \Drupal::configFactory()
    ->getEditable('simple_oauth.settings')
    ->clear('private_key')
    ->clear('public_key')
    ->save();
}

/**
 * Exposes the moderation_history view as a tab on node pages.
 */
function lightning_dev_update_8009() {
  $config = \Drupal::configFactory()->getEditable('views.view.moderation_history');

  if ($config->isNew()) {
    return;
  }
  $key = 'display.page.display_options';
  $display = $config->get($key);
  if ($display) {
    $display['menu'] = [
      'type' => 'tab',
      'title' => 'History',
      'description' => '',
      'expanded' => FALSE,
      'parent' => '',
      'weight' => 0,
      'context' => '0',
      'menu_name' => 'main',
    ];
    $config->set($key, $display)->save();
  }
}

/**
 * Causes all modules to react to the presence of Lightning Dev.
 */
function lightning_dev_update_8010() {
  $module_handler = \Drupal::moduleHandler();
  $module_handler->resetImplementations();
  $module_handler->invokeAll('modules_installed', [
    ['lightning_dev'],
  ]);
}
